file("cf-deploy.gradle.properties").withInputStream { input ->
    def p = new Properties()
    p.load(input)
    p.each { k, v -> project.ext.set(k, v) }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.cloudfoundry', name: 'cf-gradle-plugin', version: '1.1.1'
    }
}

apply plugin: 'cloudfoundry'

ext {
  productionEnv = project.hasProperty('prod')
  cfEnvLabel = productionEnv ? 'prod' : 'dev'
  cfDefaultDomain = 'cfapps.io'
  // used for setting Server.Service.Connector.proxyName system property
  connectorProxyName = productionEnv ? 'grails.org' : 'staging.grails.org'
  def cfConfigFile = file("cf-deployment-${productionEnv ? 'production' : 'development'}/cf_config.groovy")
  if(cfConfigFile.exists()) {
      cfConfig = new ConfigSlurper().parse(cfConfigFile.toURI().toURL())
  } else {
      cfConfig = new ConfigObject()
  }
}

cloudfoundry {
    application = "plugins-grails-org-${cfEnvLabel}"
    target = 'https://api.run.pivotal.io'
    organization = 'grails-org'
    space = productionEnv ? 'production' : 'development'
    file = file("target/grails-website.war")
    buildpack = "https://github.com/grails-samples/java-buildpack.git#grails-website-oom"
    env = [
        "JAVA_OPTS": "-Xverify:none -Dgrails.env=production -Dfile.encoding=UTF-8 -Duser.language=en -Duser.country=US -Daccess.logging.enabled=false -Dsun.net.client.defaultConnectTimeout=10000 -Dsun.net.client.defaultReadTimeout=10000 -DServer.Service.Connector.proxyName=${connectorProxyName}"
    ]
    if(cfConfig.containsKey('env') && cfConfig.env instanceof Map) {
        env.putAll(cfConfig.env)
    }
    mergeEnv = true
    healthCheckTimeout = 180
    memory = productionEnv ? 2048 : 1500
    diskQuota = memory + 1024
    instances = 1
    variants = ['-blue', '-green']
    domain = 'grails.org'
    host = productionEnv ? 'prod' : 'staging'
    services {
      "db-grails-org-${cfEnvLabel}" {
        label = 'cleardb'
        plan = productionEnv ? 'amp' : 'boost'
        bind = true
      }
      "sendgrid-grails-org-${cfEnvLabel}" {
        label = 'sendgrid'
        plan = 'free'
        bind = true
      }
      "newrelic-grails-org-${cfEnvLabel}" {
        label = 'newrelic'
        plan = 'standard'
        bind = true
      }
    }
}

// current cfDeploy task doesn't allow 2 domains, this is a workaround for that limitation
class CustomBlueGreenDeploymentTask extends org.cloudfoundry.gradle.tasks.DeployCloudFoundryTask {
  List<String> getAllUris() {
    List<String> customAllUris = []
    customAllUris.addAll(super.getAllUris())
    if(project.cloudfoundry.domain && project.cloudfoundry.host && project.cloudfoundry.currentVariant) {
      customAllUris << "${project.cloudfoundry.application}${project.cloudfoundry.currentVariant}.${project.ext.cfDefaultDomain}".toString()
    }
    customAllUris
  }
}

// replace cfDeploy task with our custom one
tasks.replace("cfDeploy", CustomBlueGreenDeploymentTask)

import org.cloudfoundry.client.lib.domain.CloudApplication
@Mixin(org.cloudfoundry.gradle.tasks.DeployCloudFoundryHelper)
class AliasMappingsTask extends org.cloudfoundry.gradle.tasks.AbstractMapCloudFoundryTask {
    List<String> aliasRoutes = []
    boolean returnAliasRoutes = false

    AliasMappingsTask() {
        super()
        description = 'Adds route aliases to active route'
    }

    List<String> getAllUris() {
      returnAliasRoutes ? aliasRoutes : super.getAllUris()
    }

    @TaskAction
    void updateAliasUris() {
        if(!aliasRoutes) {
          return
        }
        returnAliasRoutes = false
        withCloudFoundryClient {
            validateVariantsForDeploy()

            List<CloudApplication> apps = client.applications

            List<String> mappedAppVariants = findMappedVariants(application, apps)
            List<String> unmappedAppVariants = findUnmappedVariants(application, apps)

            returnAliasRoutes = true

            if (mappedAppVariants) {
                log "Mapping URIs ${allUris} for ${mappedAppVariants}"
            }
            if (unmappedAppVariants) {
                log "Unmapping URIs ${allUris} for ${unmappedAppVariants}"
            }

            withApplication {
                mappedAppVariants.each { appName ->
                    project.cloudfoundry.application = appName
                    mapUrisToApplication()
                }
                unmappedAppVariants.each { appName ->
                    project.cloudfoundry.application = appName
                    unmapUrisFromApplication()
                }
            }
        }
    }
}

tasks.create("cfUpdateAliases", AliasMappingsTask) {
  def plainAppNameRoute = "${project.cloudfoundry.application}.${project.ext.cfDefaultDomain}".toString()
  aliasRoutes = productionEnv ? ['www.grails.org', 'grails.org', 'plugins.grails.org', plainAppNameRoute] : ['www-dev.grails.org', 'dev.grails.org', plainAppNameRoute]
}
